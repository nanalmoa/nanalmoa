import { JwtService } from '@nestjs/jwt';
import { Auth, AuthProvider } from 'src/entities/auth.entity';
import { User } from 'src/entities/user.entity';
import { Repository } from 'typeorm';
import { CoolSmsService } from './coolsms.service';
import { ConfigService } from '@nestjs/config';
import { BasicSignupResponseDto, KakaoTokenResponseDto, LoginWithPhoneNumberResponseDto, NaverTokenResponseDto, RefreshAccessTokenResponseDto, RefreshKakaoTokenResponseDto, RefreshNaverTokenResponseDto } from './dto/response.dto';
export declare class AuthService {
    private readonly configService;
    private readonly jwtService;
    private readonly authRepository;
    private readonly userRepository;
    private readonly coolSmsService;
    constructor(configService: ConfigService, jwtService: JwtService, authRepository: Repository<Auth>, userRepository: Repository<User>, coolSmsService: CoolSmsService);
    private verificationCodes;
    private transporter;
    private emailVerificationCodes;
    private verifiedPhoneNumbers;
    private verifiedEmails;
    setPhoneNumberVerified(phoneNumber: string): void;
    setEmailVerified(email: string): void;
    isPhoneNumberVerified(phoneNumber: string): boolean;
    isEmailVerified(email: string): boolean;
    private isVerified;
    signupWithPhoneNumber(phoneNumber: string, name?: string, email?: string, profileImage?: string, address?: string): Promise<BasicSignupResponseDto>;
    signupTemporaryUser(phoneNumber: string, name?: string): Promise<BasicSignupResponseDto>;
    validateUserByPhoneNumber(phoneNumber: string): Promise<User>;
    loginWithPhoneNumber(user: User): Promise<LoginWithPhoneNumberResponseDto>;
    private generateVerificationCode;
    sendVerificationCode(phoneNumber: string): Promise<boolean>;
    verifyCode(phoneNumber: string, code: string): Promise<void>;
    invalidateVerificationCode(phoneNumber: string): void;
    private refreshBasicToken;
    getNaverToken(code: string): Promise<NaverTokenResponseDto>;
    getNaverUserInfo(accessToken: string): Promise<any>;
    refreshNaverToken(refreshToken: string): Promise<RefreshNaverTokenResponseDto>;
    getKakaoToken(code: string): Promise<KakaoTokenResponseDto>;
    getKakaoUserInfo(accessToken: string): Promise<any>;
    refreshKakaoToken(refreshToken: string): Promise<RefreshKakaoTokenResponseDto>;
    findOrCreateSocialUser(socialUser: any, refreshToken: string, provider: AuthProvider): Promise<User>;
    findUserBySocialId(oauthId: string, provider: AuthProvider): Promise<User | null>;
    createSocialUser(socialUser: any, refreshToken: string, provider: AuthProvider): Promise<User>;
    generateAccessToken(user: User, socialProvider: AuthProvider): string;
    refreshAccessToken(userUuid: string, refreshToken: string, socialProvider: AuthProvider): Promise<RefreshAccessTokenResponseDto>;
    sendEmailVerification(email: string): Promise<{
        message: string;
    }>;
    verifyEmailCode(email: string, code: string): Promise<boolean>;
    private isValidEmail;
    private sendEmail;
    revokeSocialConnection(userUuid: string, accessToken: string, provider: AuthProvider): Promise<void>;
    private revokeKakaoConnection;
    private revokeNaverConnection;
}
