name: Deploy to EC2

on:
  push:
    branches:
      - main # 메인 브랜치에 푸시될 때만 실행

jobs:
  # 변경된 파일을 감지하는 작업 (정보 제공용으로만 유지)
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      client: ${{ steps.filter.outputs.client }}
      server: ${{ steps.filter.outputs.server }}
      common: ${{ steps.filter.outputs.common }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            client:
              - 'packages/client/**'
            server:
              - 'packages/server/**'
            common:
              - 'package.json'
              - 'yarn.lock'

  # 빌드 및 배포 작업
  build-and-deploy:
    needs: detect-changes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build client
        # 조건부 실행 제거 - 항상 빌드
        run: |
          # 클라이언트 환경변수 파일 생성
          echo "${{ secrets.CLIENT_ENV }}" > packages/client/.env.production

          # 빌드 실행
          yarn build:client

      - name: Build server
        # 조건부 실행 제거 - 항상 빌드
        run: |
          # 서버 환경변수 파일 생성
          echo "${{ secrets.SERVER_ENV }}" > packages/server/.env

          # 빌드 실행
          yarn build:server

      - name: Compress build artifacts
        run: |
          # 전체 프로젝트 구조 복사
          mkdir -p deploy/packages

          # 클라이언트 파일 복사 (항상 복사)
          mkdir -p deploy/packages/client
          cp -r packages/client/dist deploy/packages/client/

          # 서버 파일 복사 (항상 복사)
          mkdir -p deploy/packages/server
          cp -r packages/server/dist deploy/packages/server/
          cp packages/server/package.json deploy/packages/server/

          # 서버 환경변수 파일 복사
          echo "${{ secrets.SERVER_ENV }}" > deploy/packages/server/.production.env

          # 공통 파일 복사
          cp package.json deploy/
          cp yarn.lock deploy/

          # 이미 있는 경우 ecosystem 파일 복사
          if [ -f "ecosystem.config.js" ]; then
            cp ecosystem.config.js deploy/
          fi

          tar -czf deploy.tar.gz deploy

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 host key to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          # 빌드된 파일을 EC2로 전송
          scp -r deploy.tar.gz ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/

          # SSH로 접속하여 배포 명령 실행
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 이전 배포 파일 백업 (선택 사항)
            timestamp=$(date +%Y%m%d%H%M%S)
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/backups
            if [ -d "/home/${{ secrets.EC2_USERNAME }}/nanalmoa" ]; then
              tar -czf /home/${{ secrets.EC2_USERNAME }}/backups/nanalmoa-$timestamp.tar.gz /home/${{ secrets.EC2_USERNAME }}/nanalmoa
            fi
            
            # 압축 해제 및 설치
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/nanalmoa
            tar -xzf deploy.tar.gz -C /home/${{ secrets.EC2_USERNAME }}
            
            # 클라이언트 파일 복사 (항상 복사)
            rm -rf /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/client/dist
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/client
            cp -r /home/${{ secrets.EC2_USERNAME }}/deploy/packages/client/dist /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/client/
            
            # PM2 프론트엔드 재시작 (없으면 시작)
            if pm2 list | grep -q "nanalmoa-frontend"; then
              pm2 restart nanalmoa-frontend
            else
              cd /home/${{ secrets.EC2_USERNAME }}/nanalmoa
              pm2 start --name nanalmoa-frontend "npx serve -s packages/client/dist -p 3000"
            fi
            
            # 서버 파일 복사 (항상 복사)
            rm -rf /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server/dist
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server
            cp -r /home/${{ secrets.EC2_USERNAME }}/deploy/packages/server/dist /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server/
            cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/packages/server/package.json /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server/
            
            # .env 파일 복사
            cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/packages/server/.production.env /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server/.env
            
            # 서버 의존성 설치 및 재시작
            cd /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server
            yarn install --production
            
            # PM2 백엔드 재시작 (없으면 시작)
            if pm2 list | grep -q "nanalmoa-backend"; then
              pm2 restart nanalmoa-backend
            else
              cd /home/${{ secrets.EC2_USERNAME }}/nanalmoa
              pm2 start --name nanalmoa-backend packages/server/dist/main.js
            fi
            
            # 공통 파일 변경 처리
            cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/package.json /home/${{ secrets.EC2_USERNAME }}/nanalmoa/
            cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/yarn.lock /home/${{ secrets.EC2_USERNAME }}/nanalmoa/
            
            # ecosystem 파일이 있으면 복사
            if [ -f "/home/${{ secrets.EC2_USERNAME }}/deploy/ecosystem.config.js" ]; then
              cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/ecosystem.config.js /home/${{ secrets.EC2_USERNAME }}/nanalmoa/
            fi
            
            # PM2 상태 저장
            pm2 save
            
            # 임시 디렉토리 정리
            rm -rf /home/${{ secrets.EC2_USERNAME }}/deploy
            rm /home/${{ secrets.EC2_USERNAME }}/deploy.tar.gz
            
            # Nginx 재시작 
            sudo systemctl restart nginx
          EOF
