name: Deploy to EC2

on:
  push:
    branches:
      - main # 메인 브랜치에 푸시될 때만 실행

jobs:
  # 변경된 파일을 감지하는 작업 (정보 제공용으로만 유지)
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      client: ${{ steps.filter.outputs.client }}
      server: ${{ steps.filter.outputs.server }}
      common: ${{ steps.filter.outputs.common }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            client:
              - 'packages/client/**'
            server:
              - 'packages/server/**'
            common:
              - 'package.json'
              - 'yarn.lock'

  # 빌드 및 배포 작업
  build-and-deploy:
    needs: detect-changes
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Create environment files
        run: |
          # 클라이언트 환경변수 파일 생성
          echo "${{ secrets.CLIENT_ENV }}" > packages/client/.env.production

          # 서버 환경변수 파일 생성
          echo "${{ secrets.SERVER_ENV }}" > packages/server/.env

      - name: Build client
        run: yarn build:client

      - name: Build server
        run: yarn build:server

      - name: Prepare deployment files
        run: |
          mkdir -p deploy/packages

          # 클라이언트 파일 복사
          mkdir -p deploy/packages/client
          cp -r packages/client/dist deploy/packages/client/

          # 서버 파일 복사
          mkdir -p deploy/packages/server
          cp -r packages/server/dist deploy/packages/server/
          cp packages/server/package.json deploy/packages/server/

          # 서버 환경변수 파일 복사
          echo "${{ secrets.SERVER_ENV }}" > deploy/packages/server/.production.env

          # 공통 파일 복사
          cp package.json deploy/
          cp yarn.lock deploy/

          # 이미 있는 경우 ecosystem 파일 복사
          if [ -f "ecosystem.config.js" ]; then
            cp ecosystem.config.js deploy/
          fi

          tar -czf deploy.tar.gz deploy

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            ServerAliveInterval 60
            ServerAliveCountMax 30" > ~/.ssh/config
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Transfer files to EC2
        run: scp deploy.tar.gz ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/

      - name: Create backup directory
        run: ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p /home/${{ secrets.EC2_USERNAME }}/backups"

      - name: Backup previous deployment (if exists)
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "if [ -d '/home/${{ secrets.EC2_USERNAME }}/nanalmoa' ]; then \
            timestamp=\$(date +%Y%m%d%H%M%S); \
            tar -czf /home/${{ secrets.EC2_USERNAME }}/backups/nanalmoa-\$timestamp.tar.gz /home/${{ secrets.EC2_USERNAME }}/nanalmoa; \
          fi"

      - name: Extract deployment files
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p /home/${{ secrets.EC2_USERNAME }}/nanalmoa; \
            tar -xzf deploy.tar.gz -C /home/${{ secrets.EC2_USERNAME }}"

      - name: Deploy client files
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "rm -rf /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/client/dist; \
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/client; \
            cp -r /home/${{ secrets.EC2_USERNAME }}/deploy/packages/client/dist /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/client/"

      - name: Deploy server files
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "rm -rf /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server/dist; \
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server; \
            cp -r /home/${{ secrets.EC2_USERNAME }}/deploy/packages/server/dist /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server/; \
            cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/packages/server/package.json /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server/; \
            cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/packages/server/.production.env /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server/.env"

      - name: Install server dependencies
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cd /home/${{ secrets.EC2_USERNAME }}/nanalmoa/packages/server && yarn install --production"

      - name: Update common files
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/package.json /home/${{ secrets.EC2_USERNAME }}/nanalmoa/; \
            cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/yarn.lock /home/${{ secrets.EC2_USERNAME }}/nanalmoa/; \
            if [ -f '/home/${{ secrets.EC2_USERNAME }}/deploy/ecosystem.config.js' ]; then \
              cp -f /home/${{ secrets.EC2_USERNAME }}/deploy/ecosystem.config.js /home/${{ secrets.EC2_USERNAME }}/nanalmoa/; \
            fi"

      - name: Restart frontend service
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "if pm2 list | grep -q 'nanalmoa-frontend'; then \
            pm2 restart nanalmoa-frontend; \
          else \
            cd /home/${{ secrets.EC2_USERNAME }}/nanalmoa && \
            pm2 start --name nanalmoa-frontend 'npx serve -s packages/client/dist -p 3000'; \
          fi"

      - name: Restart backend service
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "if pm2 list | grep -q 'nanalmoa-backend'; then \
            pm2 restart nanalmoa-backend; \
          else \
            cd /home/${{ secrets.EC2_USERNAME }}/nanalmoa && \
            pm2 start --name nanalmoa-backend packages/server/dist/main.js; \
          fi"

      - name: Save PM2 configuration
        run: ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "pm2 save"

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "sudo systemctl restart nginx"

      - name: Clean up deployment files
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "rm -rf /home/${{ secrets.EC2_USERNAME }}/deploy; \
            rm /home/${{ secrets.EC2_USERNAME }}/deploy.tar.gz"
